# coding: utf-8

"""
    Stairwell V1 HTTP APIs

    Restful APIs for the Stairwell platform. Most APIs expose named resources: each resource has a unique identifier that users use to reference that resource, and these names are what users should store as the canonical names for the resources. The base URL for this API is https://app.stairwell.com

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from stairwell_openapi_client.models.comment import Comment
from stairwell_openapi_client.models.hostname_metadata import HostnameMetadata
from stairwell_openapi_client.models.list_comments_response import ListCommentsResponse
from stairwell_openapi_client.models.list_opinions_response import ListOpinionsResponse
from stairwell_openapi_client.models.list_tags_response import ListTagsResponse
from stairwell_openapi_client.models.opinion import Opinion
from stairwell_openapi_client.models.tag import Tag

from stairwell_openapi_client.api_client import ApiClient
from stairwell_openapi_client.api_response import ApiResponse
from stairwell_openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class HostnamesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def hostnames_create_comment(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], comment : Comment, **kwargs) -> Comment:  # noqa: E501
        """CreateComment  # noqa: E501

        Creates a new comment.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param comment: (required)
        :type comment: Comment
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Comment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_create_comment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_create_comment_with_http_info(hostname, comment, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_create_comment_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], comment : Comment, **kwargs) -> ApiResponse:  # noqa: E501
        """CreateComment  # noqa: E501

        Creates a new comment.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param comment: (required)
        :type comment: Comment
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Comment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'hostname',
            'comment'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_create_comment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['comment'] is not None:
            _body_params = _params['comment']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "Comment",
        }

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/comments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def hostnames_create_opinion(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], opinion : Opinion, **kwargs) -> Opinion:  # noqa: E501
        """CreateOpinion  # noqa: E501

        Creates a new opinion.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param opinion: (required)
        :type opinion: Opinion
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Opinion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_create_opinion_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_create_opinion_with_http_info(hostname, opinion, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_create_opinion_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], opinion : Opinion, **kwargs) -> ApiResponse:  # noqa: E501
        """CreateOpinion  # noqa: E501

        Creates a new opinion.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param opinion: (required)
        :type opinion: Opinion
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Opinion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'hostname',
            'opinion'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_create_opinion" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['opinion'] is not None:
            _body_params = _params['opinion']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "Opinion",
        }

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/opinions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def hostnames_create_tag(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], tag : Tag, **kwargs) -> Tag:  # noqa: E501
        """CreateTag  # noqa: E501

        Creates a new tag.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param tag: (required)
        :type tag: Tag
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tag
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_create_tag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_create_tag_with_http_info(hostname, tag, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_create_tag_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], tag : Tag, **kwargs) -> ApiResponse:  # noqa: E501
        """CreateTag  # noqa: E501

        Creates a new tag.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param tag: (required)
        :type tag: Tag
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tag, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'hostname',
            'tag'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_create_tag" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['tag'] is not None:
            _body_params = _params['tag']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "Tag",
        }

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/tags', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def hostnames_delete_tag(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], tag : Annotated[StrictStr, Field(..., description="The tag id.")], **kwargs) -> None:  # noqa: E501
        """DeleteTag  # noqa: E501

        Deletes a tag.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param tag: The tag id. (required)
        :type tag: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_delete_tag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_delete_tag_with_http_info(hostname, tag, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_delete_tag_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], tag : Annotated[StrictStr, Field(..., description="The tag id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """DeleteTag  # noqa: E501

        Deletes a tag.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param tag: The tag id. (required)
        :type tag: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'hostname',
            'tag'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_delete_tag" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']

        if _params['tag'] is not None:
            _path_params['tag'] = _params['tag']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/tags/{tag}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def hostnames_get_hostname_metadata(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], **kwargs) -> HostnameMetadata:  # noqa: E501
        """GetHostnameMetadata  # noqa: E501

        Gets metadata for a particular hostname.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: HostnameMetadata
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_get_hostname_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_get_hostname_metadata_with_http_info(hostname, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_get_hostname_metadata_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """GetHostnameMetadata  # noqa: E501

        Gets metadata for a particular hostname.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(HostnameMetadata, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'hostname'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_get_hostname_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "HostnameMetadata",
        }

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/metadata', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def hostnames_get_tag(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], tag : Annotated[StrictStr, Field(..., description="The tag id.")], **kwargs) -> Tag:  # noqa: E501
        """GetTag  # noqa: E501

        Gets a specified tag by name.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param tag: The tag id. (required)
        :type tag: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tag
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_get_tag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_get_tag_with_http_info(hostname, tag, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_get_tag_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], tag : Annotated[StrictStr, Field(..., description="The tag id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """GetTag  # noqa: E501

        Gets a specified tag by name.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param tag: The tag id. (required)
        :type tag: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tag, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'hostname',
            'tag'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_get_tag" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']

        if _params['tag'] is not None:
            _path_params['tag'] = _params['tag']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "Tag",
        }

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/tags/{tag}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def hostnames_list_comments(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of comments to return. The service may return fewer than this value. If unspecified, at most 100 comments will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListComments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListComments` must match the call that provided the page token.")] = None, **kwargs) -> ListCommentsResponse:  # noqa: E501
        """ListComments  # noqa: E501

        Gets the comments for the specified hostname.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param page_size: The maximum number of comments to return. The service may return fewer than this value. If unspecified, at most 100 comments will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListComments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListComments` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListCommentsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_list_comments_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_list_comments_with_http_info(hostname, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_list_comments_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of comments to return. The service may return fewer than this value. If unspecified, at most 100 comments will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListComments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListComments` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListComments  # noqa: E501

        Gets the comments for the specified hostname.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param page_size: The maximum number of comments to return. The service may return fewer than this value. If unspecified, at most 100 comments will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListComments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListComments` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListCommentsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'hostname',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_list_comments" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListCommentsResponse",
        }

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/comments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def hostnames_list_opinions(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of opinions to return. The service may return fewer than this value. If unspecified, at most 100 opinions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListOpinions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOpinions` must match the call that provided the page token.")] = None, **kwargs) -> ListOpinionsResponse:  # noqa: E501
        """ListOpinions  # noqa: E501

        Gets the opinions for the specified hostname.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param page_size: The maximum number of opinions to return. The service may return fewer than this value. If unspecified, at most 100 opinions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListOpinions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOpinions` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListOpinionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_list_opinions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_list_opinions_with_http_info(hostname, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_list_opinions_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of opinions to return. The service may return fewer than this value. If unspecified, at most 100 opinions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListOpinions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOpinions` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListOpinions  # noqa: E501

        Gets the opinions for the specified hostname.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param page_size: The maximum number of opinions to return. The service may return fewer than this value. If unspecified, at most 100 opinions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListOpinions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOpinions` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListOpinionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'hostname',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_list_opinions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListOpinionsResponse",
        }

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/opinions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def hostnames_list_tags(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of tags to return. The service may return fewer than this value. If unspecified, at most 100 tags will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListTags` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTags` must match the call that provided the page token.")] = None, **kwargs) -> ListTagsResponse:  # noqa: E501
        """ListTags  # noqa: E501

        Gets the tags for the specified hostname.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param page_size: The maximum number of tags to return. The service may return fewer than this value. If unspecified, at most 100 tags will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListTags` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTags` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListTagsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the hostnames_list_tags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.hostnames_list_tags_with_http_info(hostname, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def hostnames_list_tags_with_http_info(self, hostname : Annotated[StrictStr, Field(..., description="The hostname id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of tags to return. The service may return fewer than this value. If unspecified, at most 100 tags will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListTags` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTags` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListTags  # noqa: E501

        Gets the tags for the specified hostname.  # noqa: E501

        :param hostname: The hostname id. (required)
        :type hostname: str
        :param page_size: The maximum number of tags to return. The service may return fewer than this value. If unspecified, at most 100 tags will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListTags` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTags` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListTagsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'hostname',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hostnames_list_tags" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['hostname'] is not None:
            _path_params['hostname'] = _params['hostname']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListTagsResponse",
        }

        return await self.api_client.call_api(
            '/v1/hostnames/{hostname}/tags', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
