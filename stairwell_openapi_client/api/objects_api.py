# coding: utf-8

"""
    Stairwell V1 HTTP APIs

    Restful APIs for the Stairwell platform. Most APIs expose named resources: each resource has a unique identifier that users use to reference that resource, and these names are what users should store as the canonical names for the resources. The base URL for this API is https://app.stairwell.com

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from stairwell_openapi_client.models.comment import Comment
from stairwell_openapi_client.models.list_comments_response import ListCommentsResponse
from stairwell_openapi_client.models.list_object_metadata_response import ListObjectMetadataResponse
from stairwell_openapi_client.models.list_object_sightings_response import ListObjectSightingsResponse
from stairwell_openapi_client.models.list_object_variants_response import ListObjectVariantsResponse
from stairwell_openapi_client.models.list_opinions_response import ListOpinionsResponse
from stairwell_openapi_client.models.list_tags_response import ListTagsResponse
from stairwell_openapi_client.models.object_detonation import ObjectDetonation
from stairwell_openapi_client.models.object_metadata import ObjectMetadata
from stairwell_openapi_client.models.opinion import Opinion
from stairwell_openapi_client.models.tag import Tag
from stairwell_openapi_client.models.trigger_object_detonation_request import TriggerObjectDetonationRequest

from stairwell_openapi_client.api_client import ApiClient
from stairwell_openapi_client.api_response import ApiResponse
from stairwell_openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ObjectsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def objects_create_comment(self, object : Annotated[StrictStr, Field(..., description="The object id.")], comment : Comment, **kwargs) -> Comment:  # noqa: E501
        """CreateComment  # noqa: E501

        Creates a new comment.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param comment: (required)
        :type comment: Comment
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Comment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_create_comment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_create_comment_with_http_info(object, comment, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_create_comment_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], comment : Comment, **kwargs) -> ApiResponse:  # noqa: E501
        """CreateComment  # noqa: E501

        Creates a new comment.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param comment: (required)
        :type comment: Comment
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Comment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'comment'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_create_comment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['comment'] is not None:
            _body_params = _params['comment']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "Comment",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/comments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_create_opinion(self, object : Annotated[StrictStr, Field(..., description="The object id.")], opinion : Opinion, **kwargs) -> Opinion:  # noqa: E501
        """CreateOpinion  # noqa: E501

        Creates a new opinion.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param opinion: (required)
        :type opinion: Opinion
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Opinion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_create_opinion_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_create_opinion_with_http_info(object, opinion, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_create_opinion_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], opinion : Opinion, **kwargs) -> ApiResponse:  # noqa: E501
        """CreateOpinion  # noqa: E501

        Creates a new opinion.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param opinion: (required)
        :type opinion: Opinion
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Opinion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'opinion'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_create_opinion" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['opinion'] is not None:
            _body_params = _params['opinion']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "Opinion",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/opinions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_create_tag(self, object : Annotated[StrictStr, Field(..., description="The object id.")], tag : Tag, **kwargs) -> Tag:  # noqa: E501
        """CreateTag  # noqa: E501

        Creates a new tag.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param tag: (required)
        :type tag: Tag
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tag
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_create_tag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_create_tag_with_http_info(object, tag, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_create_tag_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], tag : Tag, **kwargs) -> ApiResponse:  # noqa: E501
        """CreateTag  # noqa: E501

        Creates a new tag.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param tag: (required)
        :type tag: Tag
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tag, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'tag'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_create_tag" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['tag'] is not None:
            _body_params = _params['tag']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "Tag",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/tags', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_delete_tag(self, object : Annotated[StrictStr, Field(..., description="The object id.")], tag : Annotated[StrictStr, Field(..., description="The tag id.")], **kwargs) -> None:  # noqa: E501
        """DeleteTag  # noqa: E501

        Deletes a tag.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param tag: The tag id. (required)
        :type tag: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_delete_tag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_delete_tag_with_http_info(object, tag, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_delete_tag_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], tag : Annotated[StrictStr, Field(..., description="The tag id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """DeleteTag  # noqa: E501

        Deletes a tag.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param tag: The tag id. (required)
        :type tag: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object',
            'tag'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_delete_tag" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']

        if _params['tag'] is not None:
            _path_params['tag'] = _params['tag']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/v1/objects/{object}/tags/{tag}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_download_object(self, object : Annotated[StrictStr, Field(..., description="The object id.")], **kwargs) -> None:  # noqa: E501
        """DownloadObject  # noqa: E501

        Downloads the object as file.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_download_object_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_download_object_with_http_info(object, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_download_object_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """DownloadObject  # noqa: E501

        Downloads the object as file.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'object'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_download_object" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/v1/objects/{object}:download', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_get_object_detonation(self, object : Annotated[StrictStr, Field(..., description="The object id.")], **kwargs) -> ObjectDetonation:  # noqa: E501
        """GetObjectDetonation  # noqa: E501

        Gets a specified detonation by name.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ObjectDetonation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_get_object_detonation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_get_object_detonation_with_http_info(object, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_get_object_detonation_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """GetObjectDetonation  # noqa: E501

        Gets a specified detonation by name.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ObjectDetonation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_get_object_detonation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ObjectDetonation",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/detonation', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_get_object_metadata(self, object : Annotated[StrictStr, Field(..., description="The object id.")], **kwargs) -> ObjectMetadata:  # noqa: E501
        """GetObjectMetadata  # noqa: E501

        Gets the metadata for the object specified.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ObjectMetadata
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_get_object_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_get_object_metadata_with_http_info(object, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_get_object_metadata_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """GetObjectMetadata  # noqa: E501

        Gets the metadata for the object specified.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ObjectMetadata, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_get_object_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ObjectMetadata",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/metadata', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_get_tag(self, object : Annotated[StrictStr, Field(..., description="The object id.")], tag : Annotated[StrictStr, Field(..., description="The tag id.")], **kwargs) -> Tag:  # noqa: E501
        """GetTag  # noqa: E501

        Gets a specified tag by name.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param tag: The tag id. (required)
        :type tag: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Tag
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_get_tag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_get_tag_with_http_info(object, tag, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_get_tag_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], tag : Annotated[StrictStr, Field(..., description="The tag id.")], **kwargs) -> ApiResponse:  # noqa: E501
        """GetTag  # noqa: E501

        Gets a specified tag by name.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param tag: The tag id. (required)
        :type tag: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Tag, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'tag'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_get_tag" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']

        if _params['tag'] is not None:
            _path_params['tag'] = _params['tag']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "Tag",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/tags/{tag}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_list_comments(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of comments to return. The service may return fewer than this value. If unspecified, at most 100 comments will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListComments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListComments` must match the call that provided the page token.")] = None, **kwargs) -> ListCommentsResponse:  # noqa: E501
        """ListComments  # noqa: E501

        Gets the comments for the specified object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of comments to return. The service may return fewer than this value. If unspecified, at most 100 comments will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListComments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListComments` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListCommentsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_list_comments_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_list_comments_with_http_info(object, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_list_comments_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of comments to return. The service may return fewer than this value. If unspecified, at most 100 comments will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListComments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListComments` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListComments  # noqa: E501

        Gets the comments for the specified object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of comments to return. The service may return fewer than this value. If unspecified, at most 100 comments will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListComments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListComments` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListCommentsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_list_comments" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListCommentsResponse",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/comments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_list_object_metadata(self, filter : Annotated[Optional[StrictStr], Field(description="CEL string filter which objects must match. https://help.stairwell.com/en/knowledge/how-do-i-write-a-cel-query")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of objects to return. The service may return fewer than this value. If unspecified, at most 50 objects will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListObjectMetadata` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectMetadata` must match the call that provided the page token.")] = None, **kwargs) -> ListObjectMetadataResponse:  # noqa: E501
        """ListObjectMetadata  # noqa: E501

        Fetches a list of object metadata. Objects returned match the filter  specified in the request.   https://help.stairwell.com/en/knowledge/how-do-i-write-a-cel-query  # noqa: E501

        :param filter: CEL string filter which objects must match. https://help.stairwell.com/en/knowledge/how-do-i-write-a-cel-query
        :type filter: str
        :param page_size: The maximum number of objects to return. The service may return fewer than this value. If unspecified, at most 50 objects will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListObjectMetadata` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectMetadata` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListObjectMetadataResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_list_object_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_list_object_metadata_with_http_info(filter, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_list_object_metadata_with_http_info(self, filter : Annotated[Optional[StrictStr], Field(description="CEL string filter which objects must match. https://help.stairwell.com/en/knowledge/how-do-i-write-a-cel-query")] = None, page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of objects to return. The service may return fewer than this value. If unspecified, at most 50 objects will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListObjectMetadata` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectMetadata` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListObjectMetadata  # noqa: E501

        Fetches a list of object metadata. Objects returned match the filter  specified in the request.   https://help.stairwell.com/en/knowledge/how-do-i-write-a-cel-query  # noqa: E501

        :param filter: CEL string filter which objects must match. https://help.stairwell.com/en/knowledge/how-do-i-write-a-cel-query
        :type filter: str
        :param page_size: The maximum number of objects to return. The service may return fewer than this value. If unspecified, at most 50 objects will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListObjectMetadata` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectMetadata` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListObjectMetadataResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_list_object_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListObjectMetadataResponse",
        }

        return await self.api_client.call_api(
            '/v1/objects/metadata', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_list_object_sightings(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of sightings to return. The service may return fewer than this value. If unspecified, at most 100 sightings will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListObjectSightings` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectSightings` must match the call that provided the page token.")] = None, **kwargs) -> ListObjectSightingsResponse:  # noqa: E501
        """ListObjectSightings  # noqa: E501

        Gets the sightings for the specified object an any assets on which it has  appeared.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of sightings to return. The service may return fewer than this value. If unspecified, at most 100 sightings will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListObjectSightings` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectSightings` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListObjectSightingsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_list_object_sightings_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_list_object_sightings_with_http_info(object, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_list_object_sightings_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of sightings to return. The service may return fewer than this value. If unspecified, at most 100 sightings will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListObjectSightings` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectSightings` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListObjectSightings  # noqa: E501

        Gets the sightings for the specified object an any assets on which it has  appeared.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of sightings to return. The service may return fewer than this value. If unspecified, at most 100 sightings will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListObjectSightings` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectSightings` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListObjectSightingsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_list_object_sightings" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListObjectSightingsResponse",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/sightings', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_list_object_variants(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of variants to return. The service may return fewer than this value. If unspecified, at most 100 variants will be returned. The maximum value is 100; values above 100 will be coerced to 100.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListObjectVariants` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectVariants` must match the call that provided the page token.")] = None, **kwargs) -> ListObjectVariantsResponse:  # noqa: E501
        """ListObjectVariants  # noqa: E501

        Gets the variants for the specified object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of variants to return. The service may return fewer than this value. If unspecified, at most 100 variants will be returned. The maximum value is 100; values above 100 will be coerced to 100.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListObjectVariants` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectVariants` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListObjectVariantsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_list_object_variants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_list_object_variants_with_http_info(object, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_list_object_variants_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of variants to return. The service may return fewer than this value. If unspecified, at most 100 variants will be returned. The maximum value is 100; values above 100 will be coerced to 100.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListObjectVariants` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectVariants` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListObjectVariants  # noqa: E501

        Gets the variants for the specified object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of variants to return. The service may return fewer than this value. If unspecified, at most 100 variants will be returned. The maximum value is 100; values above 100 will be coerced to 100.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListObjectVariants` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListObjectVariants` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListObjectVariantsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_list_object_variants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListObjectVariantsResponse",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/variants', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_list_opinions(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of opinions to return. The service may return fewer than this value. If unspecified, at most 100 opinions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListOpinions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOpinions` must match the call that provided the page token.")] = None, **kwargs) -> ListOpinionsResponse:  # noqa: E501
        """ListOpinions  # noqa: E501

        Gets the opinions for the specified object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of opinions to return. The service may return fewer than this value. If unspecified, at most 100 opinions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListOpinions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOpinions` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListOpinionsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_list_opinions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_list_opinions_with_http_info(object, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_list_opinions_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of opinions to return. The service may return fewer than this value. If unspecified, at most 100 opinions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListOpinions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOpinions` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListOpinions  # noqa: E501

        Gets the opinions for the specified object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of opinions to return. The service may return fewer than this value. If unspecified, at most 100 opinions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListOpinions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOpinions` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListOpinionsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_list_opinions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListOpinionsResponse",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/opinions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_list_tags(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of tags to return. The service may return fewer than this value. If unspecified, at most 100 tags will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListTags` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTags` must match the call that provided the page token.")] = None, **kwargs) -> ListTagsResponse:  # noqa: E501
        """ListTags  # noqa: E501

        Gets the tags for the specified object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of tags to return. The service may return fewer than this value. If unspecified, at most 100 tags will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListTags` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTags` must match the call that provided the page token.
        :type page_token: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListTagsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_list_tags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_list_tags_with_http_info(object, page_size, page_token, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_list_tags_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], page_size : Annotated[Optional[StrictInt], Field(description="The maximum number of tags to return. The service may return fewer than this value. If unspecified, at most 100 tags will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A page token, received from a previous `ListTags` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTags` must match the call that provided the page token.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """ListTags  # noqa: E501

        Gets the tags for the specified object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param page_size: The maximum number of tags to return. The service may return fewer than this value. If unspecified, at most 100 tags will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :type page_size: int
        :param page_token: A page token, received from a previous `ListTags` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTags` must match the call that provided the page token.
        :type page_token: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListTagsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'page_size',
            'page_token'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_list_tags" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('pageToken', _params['page_token']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ListTagsResponse",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/tags', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def objects_trigger_object_detonation(self, object : Annotated[StrictStr, Field(..., description="The object id.")], trigger_object_detonation_request : TriggerObjectDetonationRequest, **kwargs) -> ObjectDetonation:  # noqa: E501
        """TriggerObjectDetonation  # noqa: E501

        Triggers a new detonation for the parent object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param trigger_object_detonation_request: (required)
        :type trigger_object_detonation_request: TriggerObjectDetonationRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ObjectDetonation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the objects_trigger_object_detonation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.objects_trigger_object_detonation_with_http_info(object, trigger_object_detonation_request, **kwargs)  # noqa: E501

    @validate_arguments
    async def objects_trigger_object_detonation_with_http_info(self, object : Annotated[StrictStr, Field(..., description="The object id.")], trigger_object_detonation_request : TriggerObjectDetonationRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """TriggerObjectDetonation  # noqa: E501

        Triggers a new detonation for the parent object.  # noqa: E501

        :param object: The object id. (required)
        :type object: str
        :param trigger_object_detonation_request: (required)
        :type trigger_object_detonation_request: TriggerObjectDetonationRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ObjectDetonation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'object',
            'trigger_object_detonation_request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_trigger_object_detonation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['object'] is not None:
            _path_params['object'] = _params['object']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['trigger_object_detonation_request'] is not None:
            _body_params = _params['trigger_object_detonation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "ObjectDetonation",
        }

        return await self.api_client.call_api(
            '/v1/objects/{object}/detonation:trigger', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
