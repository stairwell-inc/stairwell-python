# coding: utf-8

"""
    Stairwell V1 HTTP APIs

    Restful APIs for the Stairwell platform. Most APIs expose named resources: each resource has a unique identifier that users use to reference that resource, and these names are what users should store as the canonical names for the resources. The base URL for this API is https://app.stairwell.com

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from stairwell_openapi_client.models.mal_eval import MalEval
from stairwell_openapi_client.models.network_indicators import NetworkIndicators
from stairwell_openapi_client.models.object_detonation import ObjectDetonation
from stairwell_openapi_client.models.object_signature import ObjectSignature
from stairwell_openapi_client.models.tag import Tag

class ObjectMetadata(BaseModel):
    """
    ObjectMetadata contains static and extracted metadata relating to an object (file).  # noqa: E501
    """
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the object.")
    md5: Optional[StrictStr] = Field(default=None, description="md5 is the md5 hash signature of an object.")
    sha1: Optional[StrictStr] = Field(default=None, description="sha1 is the sha1 hash signature of an object.")
    sha256: Optional[StrictStr] = Field(default=None, description="sha256 is the sha256 hash signature of an object.")
    sha3256: Optional[StrictStr] = Field(default=None, description="sha3256 is the sha3_256 hash signature of an object.")
    size: Optional[StrictStr] = Field(default=None, description="size is the size of the file in bytes.")
    stairwell_first_seen_time: Optional[datetime] = Field(default=None, alias="stairwellFirstSeenTime", description="stairwell_first_seen_time is the timestamp at which an object was first observed by Stairwell.")
    tags: Optional[conlist(Tag)] = Field(default=None, description="Tags associated with this object. Currently only populated by GetObjectMetadata. Other endpoints returning objects omit this field.")
    detonation: Optional[ObjectDetonation] = None
    mal_eval: Optional[MalEval] = Field(default=None, alias="malEval")
    environments: Optional[conlist(StrictStr)] = Field(default=None, description="List of environments that this object has been seen within.")
    yara_rule_matches: Optional[conlist(StrictStr)] = Field(default=None, alias="yaraRuleMatches", description="Yara rule resource names which have matched on this object. If more than 1000 yara rule, the matches will be truncated.")
    network_indicators: Optional[NetworkIndicators] = Field(default=None, alias="networkIndicators")
    magic: Optional[StrictStr] = Field(default=None, description="Magic number as determined by yara rule based identification.")
    mime_type: Optional[StrictStr] = Field(default=None, alias="mimeType", description="MIME type as determined by yara rule based identification.")
    shannon_entropy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shannonEntropy", description="Measure of the information contained in a object as opposed to the portion of the object that is determined (or predictable).")
    imphash: Optional[StrictStr] = Field(default=None, description="The Mandiant import hash (imphash) of the object.")
    imphash_sorted: Optional[StrictStr] = Field(default=None, alias="imphashSorted", description="The sorted import hash (imphash) of the object where the imports are sorted.")
    tlsh: Optional[StrictStr] = Field(default=None, description="The TLSH of the object, see https://github.com/trendmicro/tlsh")
    object_signature: Optional[ObjectSignature] = Field(default=None, alias="objectSignature")
    __properties = ["name", "md5", "sha1", "sha256", "sha3256", "size", "stairwellFirstSeenTime", "tags", "detonation", "malEval", "environments", "yaraRuleMatches", "networkIndicators", "magic", "mimeType", "shannonEntropy", "imphash", "imphashSorted", "tlsh", "objectSignature"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ObjectMetadata:
        """Create an instance of ObjectMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of detonation
        if self.detonation:
            _dict['detonation'] = self.detonation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mal_eval
        if self.mal_eval:
            _dict['malEval'] = self.mal_eval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_indicators
        if self.network_indicators:
            _dict['networkIndicators'] = self.network_indicators.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_signature
        if self.object_signature:
            _dict['objectSignature'] = self.object_signature.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ObjectMetadata:
        """Create an instance of ObjectMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ObjectMetadata.parse_obj(obj)

        _obj = ObjectMetadata.parse_obj({
            "name": obj.get("name"),
            "md5": obj.get("md5"),
            "sha1": obj.get("sha1"),
            "sha256": obj.get("sha256"),
            "sha3256": obj.get("sha3256"),
            "size": obj.get("size"),
            "stairwell_first_seen_time": obj.get("stairwellFirstSeenTime"),
            "tags": [Tag.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None,
            "detonation": ObjectDetonation.from_dict(obj.get("detonation")) if obj.get("detonation") is not None else None,
            "mal_eval": MalEval.from_dict(obj.get("malEval")) if obj.get("malEval") is not None else None,
            "environments": obj.get("environments"),
            "yara_rule_matches": obj.get("yaraRuleMatches"),
            "network_indicators": NetworkIndicators.from_dict(obj.get("networkIndicators")) if obj.get("networkIndicators") is not None else None,
            "magic": obj.get("magic"),
            "mime_type": obj.get("mimeType"),
            "shannon_entropy": obj.get("shannonEntropy"),
            "imphash": obj.get("imphash"),
            "imphash_sorted": obj.get("imphashSorted"),
            "tlsh": obj.get("tlsh"),
            "object_signature": ObjectSignature.from_dict(obj.get("objectSignature")) if obj.get("objectSignature") is not None else None
        })
        return _obj


