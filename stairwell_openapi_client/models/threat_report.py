# coding: utf-8

"""
    Stairwell V1 HTTP APIs

    Restful APIs for the Stairwell platform. Most APIs expose named resources: each resource has a unique identifier that users use to reference that resource, and these names are what users should store as the canonical names for the resources. The base URL for this API is https://app.stairwell.com

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class ThreatReport(BaseModel):
    """
    ThreatReport is a intelligence source that contains threat information about entities.  # noqa: E501
    """
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the entity.")
    uid: StrictStr = Field(default=..., description="ID of the threat report of the form six characters of base62.")
    environment: StrictStr = Field(default=..., description="Environment that contains the threat report.")
    title: Optional[StrictStr] = Field(default=None, description="Title of the threat report.")
    upload_time: Optional[datetime] = Field(default=None, alias="uploadTime", description="When the threat report was uploaded.")
    sources: Optional[conlist(StrictStr)] = Field(default=None, description="Sources, for example the organization, that the threat report came from.")
    description: Optional[StrictStr] = Field(default=None, description="Automatically generated summarization of the threat report")
    report_uri: StrictStr = Field(default=..., alias="reportUri", description="URI of the original report.")
    __properties = ["name", "uid", "environment", "title", "uploadTime", "sources", "description", "reportUri"]

    @validator('sources')
    def sources_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('THREAT_REPORT_SOURCE_UNSPECIFIED', 'STAIRWELL', 'MANDIANT', 'UNIT42', 'CROWDSTRIKE', 'BLACKBERRY', 'TALOS', 'SECURELIST', 'CHECKPOINT', 'FIREEYE', 'SOPHOS', 'SANS_ISC', 'XANDA', 'ABUSE_CH', 'ESET', 'CISA', 'MICROSOFT', 'ETDA', 'OTX', 'AGRO', 'ORKL', 'VXUG', 'MALPEDIA', 'MISPGALAXY', 'APT_NOTES', 'CYBERMONITOR', 'MITRE', 'TRELLIX', 'SENTINELONE', 'GOOGLE', 'TREND_MICRO', 'VOLEXITY', 'MALWAREBYTES', 'CYBEREASON', 'MCAFEE', 'INQUEST', 'FORTINET', 'PWC', 'TEAMT5', 'TEAM_CYMRU', 'KROLL', 'ASEC', 'ESENTIRE', 'SYMANTEC'):
                raise ValueError("each list item must be one of ('THREAT_REPORT_SOURCE_UNSPECIFIED', 'STAIRWELL', 'MANDIANT', 'UNIT42', 'CROWDSTRIKE', 'BLACKBERRY', 'TALOS', 'SECURELIST', 'CHECKPOINT', 'FIREEYE', 'SOPHOS', 'SANS_ISC', 'XANDA', 'ABUSE_CH', 'ESET', 'CISA', 'MICROSOFT', 'ETDA', 'OTX', 'AGRO', 'ORKL', 'VXUG', 'MALPEDIA', 'MISPGALAXY', 'APT_NOTES', 'CYBERMONITOR', 'MITRE', 'TRELLIX', 'SENTINELONE', 'GOOGLE', 'TREND_MICRO', 'VOLEXITY', 'MALWAREBYTES', 'CYBEREASON', 'MCAFEE', 'INQUEST', 'FORTINET', 'PWC', 'TEAMT5', 'TEAM_CYMRU', 'KROLL', 'ASEC', 'ESENTIRE', 'SYMANTEC')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ThreatReport:
        """Create an instance of ThreatReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "uid",
                            "title",
                            "upload_time",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ThreatReport:
        """Create an instance of ThreatReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ThreatReport.parse_obj(obj)

        _obj = ThreatReport.parse_obj({
            "name": obj.get("name"),
            "uid": obj.get("uid"),
            "environment": obj.get("environment"),
            "title": obj.get("title"),
            "upload_time": obj.get("uploadTime"),
            "sources": obj.get("sources"),
            "description": obj.get("description"),
            "report_uri": obj.get("reportUri")
        })
        return _obj


