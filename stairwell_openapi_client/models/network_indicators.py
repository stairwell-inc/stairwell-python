# coding: utf-8

"""
    Stairwell V1 HTTP APIs

    Restful APIs for the Stairwell platform. Most APIs expose named resources: each resource has a unique identifier that users use to reference that resource, and these names are what users should store as the canonical names for the resources. The base URL for this API is https://app.stairwell.com

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class NetworkIndicators(BaseModel):
    """
    NetworkIndicators is a list hostnames and IPs that were extracted via static analysis. Ports are not included because they generally do not occur next to the hostname or IPs in the binary.  # noqa: E501
    """
    ip_addresses: Optional[conlist(StrictStr)] = Field(None, alias="ipAddresses", description="ip_addresses is the list of IPs in the binary.")
    uninteresting_ip_addresses: Optional[conlist(StrictStr)] = Field(None, alias="uninterestingIpAddresses", description="Address types which are typically not useful: private, global unicast and link local multicast IPs.")
    hostnames: Optional[conlist(StrictStr)] = Field(None, description="hostnames is the list of Hostnames in the the binary.")
    improbable_hostnames: Optional[conlist(StrictStr)] = Field(None, alias="improbableHostnames", description="Hostnames which are technically valid, but are most likely noisy artifacts from static analysis.")
    private_hostnames: Optional[conlist(StrictStr)] = Field(None, alias="privateHostnames", description="This is a list of TLDs that are closed (or probably closed) to public registrations. These are generated by some manual analysis and data analysis from active dns data.")
    __properties = ["ipAddresses", "uninterestingIpAddresses", "hostnames", "improbableHostnames", "privateHostnames"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkIndicators:
        """Create an instance of NetworkIndicators from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkIndicators:
        """Create an instance of NetworkIndicators from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkIndicators.parse_obj(obj)

        _obj = NetworkIndicators.parse_obj({
            "ip_addresses": obj.get("ipAddresses"),
            "uninteresting_ip_addresses": obj.get("uninterestingIpAddresses"),
            "hostnames": obj.get("hostnames"),
            "improbable_hostnames": obj.get("improbableHostnames"),
            "private_hostnames": obj.get("privateHostnames")
        })
        return _obj


