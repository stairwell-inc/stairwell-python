# coding: utf-8

"""
    Stairwell V1 HTTP APIs

    Restful APIs for the Stairwell platform. Most APIs expose named resources: each resource has a unique identifier that users use to reference that resource, and these names are what users should store as the canonical names for the resources. The base URL for this API is https://app.stairwell.com

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class FileAction(BaseModel):
    """
    FileActions define the files which were accessed/modified during detonation  # noqa: E501
    """
    filename: Optional[StrictStr] = Field(None, description="Path to the file")
    action: Optional[StrictStr] = Field(None, description="Action performed on the file")
    __properties = ["filename", "action"]

    @validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACTION_UNSPECIFIED', 'ACCESS', 'WRITE', 'DELETE'):
            raise ValueError("must be one of enum values ('ACTION_UNSPECIFIED', 'ACCESS', 'WRITE', 'DELETE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FileAction:
        """Create an instance of FileAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FileAction:
        """Create an instance of FileAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FileAction.parse_obj(obj)

        _obj = FileAction.parse_obj({
            "filename": obj.get("filename"),
            "action": obj.get("action")
        })
        return _obj


