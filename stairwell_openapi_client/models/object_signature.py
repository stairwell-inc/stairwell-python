# coding: utf-8

"""
    Stairwell V1 HTTP APIs

    Restful APIs for the Stairwell platform. Most APIs expose named resources: each resource has a unique identifier that users use to reference that resource, and these names are what users should store as the canonical names for the resources. The base URL for this API is https://app.stairwell.com

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from stairwell_openapi_client.models.x509_certificate import X509Certificate

class ObjectSignature(BaseModel):
    """
    Contains all information known about an object's certificate based signature.  # noqa: E501
    """
    x509_certificates: Optional[conlist(X509Certificate)] = Field(None, alias="x509Certificates", description="The x509 certificates embedded within the portable executable.")
    pkcs7_verification_result: Optional[StrictStr] = Field(None, alias="pkcs7VerificationResult", description="Whether the x509 certificate chain is valid. This may be unknown if the pkcs7 package does not support the file's encryption scheme.")
    __properties = ["x509Certificates", "pkcs7VerificationResult"]

    @validator('pkcs7_verification_result')
    def pkcs7_verification_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PKCS7_VERIFICATION_RESULT_UNSPECIFIED', 'VALID', 'INVALID', 'UNSUPPORTED'):
            raise ValueError("must be one of enum values ('PKCS7_VERIFICATION_RESULT_UNSPECIFIED', 'VALID', 'INVALID', 'UNSUPPORTED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ObjectSignature:
        """Create an instance of ObjectSignature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in x509_certificates (list)
        _items = []
        if self.x509_certificates:
            for _item in self.x509_certificates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['x509Certificates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ObjectSignature:
        """Create an instance of ObjectSignature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ObjectSignature.parse_obj(obj)

        _obj = ObjectSignature.parse_obj({
            "x509_certificates": [X509Certificate.from_dict(_item) for _item in obj.get("x509Certificates")] if obj.get("x509Certificates") is not None else None,
            "pkcs7_verification_result": obj.get("pkcs7VerificationResult")
        })
        return _obj


